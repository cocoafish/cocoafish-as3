<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="100%" minWidth="955" minHeight="600" 
			   applicationComplete="updateForm()" 
			   xmlns:containers="com.dougmccune.containers.*"
			   xmlns:components="com.cocoafish.api.test.components.*" 
			   xmlns:maps="com.google.maps.*">
	<fx:Declarations>
		<s:RadioButtonGroup id="radiogroup1"/>
		<mx:Validator id="appKeyV" source="{appKeyTextField}" property="text"  requiredFieldError="App. key is required"/>
		<mx:Validator id="oauthKeyV" source="{oauthKeyTextField}" property="text"  requiredFieldError="OAuth key is required"/>
		<mx:Validator id="oauthSecV" source="{oauthSecretTextField}" property="text"  requiredFieldError="OAuth secret is required"/>
		<!--<components:LoginComponent visible="false" horizontalCenter="-343" verticalCenter="-115"/>-->
		
	</fx:Declarations>
	
	<fx:Script source="scripts/collections.as"/>
	<fx:Script source="scripts/common.as"/>
	<fx:Script source="scripts/keyvalues.as"/>
	<fx:Script source="scripts/places.as"/>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.cocoafish.sdk.Cocoafish;
			import com.google.maps.LatLng;
			import com.google.maps.MapType;
			
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.ProgressBar;
			import mx.managers.PopUpManager;
			
			import spark.events.TextOperationEvent;
			
			private var photo:FileReference;
			private var isPhotoLoaded:Boolean = false;
			var waitingpopup:TitleWindow;
			
//			private var login:LoginComponent = new LoginComponent();
//			public function init():void
//			{
//				login.addEventListener("Success", loginSuccess);
//				login.addEventListener("Failed", loginFail);
//				PopUpManager.addPopUp(login.loginWindow, this, true);
//				PopUpManager.centerPopUp(login.loginWindow);
//			}
			
//			public function loginSuccess(event:Event):void
//			{
//				if(login.oauth.selected) {
//					oauth.selected = true;
//					appKey.selected = false;
//				}
//				if(login.appKey.selected) {
//					oauth.selected = false;
//					appKey.selected = true;
//				}
//				appKeyTextField.text = login.appKeyTextField.text;
//				oauthKeyTextField.text = login.oauthKeyTextField.text;
//				oauthSecretTextField.text = login.oauthSecretTextField.text;
//				updateForm();
//				
//				Alert.show("User login succeed!");
//			}
//			
//			public function loginFail(event:Event):void
//			{
//				Alert.show("User login failed!");
//			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				var sdk:Cocoafish = getSDK();
				var data:Object = new Object();
				data.email = emailTextField.text;
				data.first_name = firstNameTextField.text;
				data.last_name = lastNameTextField.text;
				data.password = passwdTextField.text;
				data.password_confirmation = passwdConfirmTextField.text;
				if(photoRadio.selected) {
					data.photo = photo;
				}
				
				sdk.addProgressListener(function(event:ProgressEvent):void{
					trace("called! -- loaded:" + event.bytesLoaded + "   ; total:" + event.bytesTotal);
				});
				
				sdk.sendRequest("users/create.json", URLRequestMethod.POST, data, false, function(data:Object):void {
					hideLoading();
					if(data) {
						if(data.hasOwnProperty("meta")) {
							var meta:Object = data.meta;
							if(meta.status == "ok" && meta.code == 200 && meta.method_name == "createUser") {
								var message:String = "";
								var user:Object = data.response.users[0];
								message += "Create user successful!\n";
								message += "id:" + user.id + "\n";
								message += "first name:" + user.first_name + "\n";
								message += "last name:" + user.last_name + "\n";
								message += "email:" + user.email + "\n";
								Alert.show(message);
								
								welcomePanel.visible = true;
								loginPanel.visible = false;
								createPanel.visible = false;
								placesTab.enabled = true;
								photoTab.enabled = true;
								keyvalueTab.enabled = true;
								
								SessionHelper.getInstance().setUserId(user.id);
								nameLabel.text = user.first_name + " " + user.last_name;
								emailLabel.text = user.email;
								loginLabel.text = user.updated_at;
								createLabel.text = user.created_at;
								
								updateSDKOptions(false);
								return;
							} else {
								var message:String = "Create user failed.\n\n";
								message += "Code:" + meta.code + "\n";
								message += "Details:" + meta.message + "\n";
								Alert.show(message);
							}
						}
					}
				});
				showLoading();
			}
			
			protected function selectPhoto(event:MouseEvent):void {
				photo= new FileReference();
				photo.addEventListener(Event.SELECT, photoSelected);
				photo.browse();
			}
			
			protected function photoSelected(event:Event):void {
				photoTextField.text = photo.name;
				photo.removeEventListener(Event.SELECT, photoSelected);
				photo.addEventListener(Event.COMPLETE, photoLoaded);
				photo.load();
			}
			
			protected function photoLoaded(event:Event):void {
				photo.removeEventListener(Event.COMPLETE, photoLoaded);
				isPhotoLoaded = true;
				updateForm();
			}
			
			protected function photoRadio_clickHandler(event:MouseEvent):void
			{
				updateForm();
			}
			
			protected function updateForm():void {
				sendBtn.enabled = false;
				if(photoRadio.selected) {
					photoTextField.enabled = true;
					browseButton.enabled = true;
					if(isPhotoLoaded) {
						sendBtn.enabled = true;
					}
				} else {
					photoTextField.enabled = false;
					browseButton.enabled = false;
					sendBtn.enabled = true;
				}
				
				if(appKey.selected) {
					appKeyTextField.enabled = true;
					oauthKeyTextField.enabled = false;
					oauthSecretTextField.enabled = false;
				}
				if(oauth.selected) {
					appKeyTextField.enabled = false;
					oauthKeyTextField.enabled = true;
					oauthSecretTextField.enabled = true;
				}
				
				appKeyV.validate();
				oauthKeyV.validate();
				oauthSecV.validate();
			}
			
			public function showLoading():void {
				if(waitingpopup == null) {
					waitingpopup = new TitleWindow();
					waitingpopup.title = "Please Wait";
					var pb:ProgressBar = new ProgressBar();
					pb.indeterminate = true;
					pb.label = "Processing...";
					waitingpopup.addChild(pb);    
				}
				PopUpManager.addPopUp(waitingpopup, this, true);
				PopUpManager.centerPopUp(waitingpopup);
			}
			
			public function hideLoading():void {
				PopUpManager.removePopUp(waitingpopup);
			}
			
			protected function appKey_clickHandler(event:MouseEvent):void
			{
				updateForm();
				sdk = null;
				SDKHelper.getInstance().resetSDK();
			}
			
			protected function oauth_clickHandler(event:MouseEvent):void
			{
				updateForm();
				sdk = null;
				SDKHelper.getInstance().resetSDK();
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				var sdk:Cocoafish = getSDK();
				var data:Object = new Object();
				data.login = loginTextField.text;
				data.password = loginPasswdTextField.text;
				
				sdk.sendRequest("users/login.json", URLRequestMethod.POST, data, false, function(data:Object):void {
					hideLoading();
					if(data && data.hasOwnProperty("meta")) 
					{
						if(data.meta.code == 200 && data.meta.status == "ok" && data.meta.method_name == "loginUser")
						{
							welcomePanel.visible = true;
							loginPanel.visible = false;
							createPanel.visible = false;
							placesTab.enabled = true;
							photoTab.enabled = true;
							keyvalueTab.enabled = true;
							
							var user:Object = data.response.users[0];
							SessionHelper.getInstance().setUserId(user.id);
							nameLabel.text = user.first_name + " " + user.last_name;
							emailLabel.text = user.email;
							loginLabel.text = user.updated_at;
							createLabel.text = user.created_at;
							
							updateSDKOptions(false);
							return;
						}
					}
					Alert.show(data.meta.message, "Login Failed");
				});
				showLoading();
			}
			
			protected function button4_clickHandler(event:MouseEvent):void
			{
				var sdk:Cocoafish = getSDK();
				
				sdk.sendRequest("users/logout.json", URLRequestMethod.GET, null, false, function(data:Object):void {
					hideLoading();
					
					loginTextField.text = "";
					loginPasswdTextField.text = "";
					firstNameTextField.text = "";
					lastNameTextField.text = "";
					emailTextField.text = "";
					passwdTextField.text = "";
					passwdConfirmTextField.text = "";
					photoTextField.text = "";
					photoRadio.selected = false;
					photoTextField.enabled = false;
					browseButton.enabled = false;
					
					welcomePanel.visible = false;
					loginPanel.visible = true;
					createPanel.visible = true;
					placesTab.enabled = false;
					photoTab.enabled = false;
					keyvalueTab.enabled = false;
					SessionHelper.getInstance().setUserId("");
					updateSDKOptions(true);
					return;
				});
				showLoading();
			}
			
			protected function updateSDKOptions(isEnable:Boolean):void {
				appKey.enabled = isEnable;
				oauth.enabled = isEnable;
				appKeyTextField.enabled = isEnable;
				oauthKeyTextField.enabled = isEnable;
				oauthSecretTextField.enabled = isEnable;
			}
			
		]]>
	</fx:Script>
	
	<mx:TabNavigator x="11" y="126" width="726" height="459">
		<s:NavigatorContent width="100%" height="100%" label="Users">
			<s:Panel id="createPanel" x="9" y="160" width="394" height="255"
					 skinClass="spark.skins.spark.PanelSkin" title="Create User">
				<s:Label x="10" y="10" text="First Name:"/>
				<s:Label x="10" y="10" text="First Name:"/>
				<s:TextInput id="firstNameTextField" x="124" y="4" width="258"/>
				<s:TextInput id="lastNameTextField" x="124" y="34" width="258"/>
				<s:TextInput id="emailTextField" x="124" y="64" width="258"/>
				<s:TextInput id="passwdTextField" x="124" y="94" width="258" displayAsPassword="true"/>
				<s:TextInput id="passwdConfirmTextField" x="124" y="124" width="258" displayAsPassword="true"/>
				<s:Label x="10" y="71" height="15" text="Email:"/>
				<s:Label x="10" y="40" text="Last Name:"/>
				<s:Label x="10" y="98" height="18" text="Password:"/>
				<s:Label x="10" y="129" text="Password Confirm:"/>
				<s:CheckBox id="photoRadio" x="10" y="154" label="Photo"
							click="photoRadio_clickHandler(event)"/>
				<s:TextInput id="photoTextField" x="124" y="154" width="180" editable="false"
							 enabled="false"/>
				<s:Button id="browseButton" x="312" y="155" label="Browse..."
						  click="selectPhoto(event)" enabled="false"/>
				<s:Button id="sendBtn" x="279" y="189" width="103" label="Create User"
						  click="button1_clickHandler(event)" enabled="true"/>
			</s:Panel>
			<s:Panel id="loginPanel" x="11" y="10" width="393" height="124" title="Login User">
				<s:Button x="311" y="60" label="Login" click="button3_clickHandler(event)"/>
				<s:Label x="10" y="10" text="Login:"/>
				<s:Label x="10" y="40" text="Password:"/>
				<s:TextInput id="loginTextField" x="94" y="4" width="287"/>
				<s:TextInput id="loginPasswdTextField" x="94" y="34" width="287"
							 displayAsPassword="true"/>
			</s:Panel>
			<s:Panel id="welcomePanel" x="11" y="10" width="391" height="164" title="Welcome!" visible="false">
				<s:Button x="289" y="90" width="89" height="26" label="Logout"
						  click="button4_clickHandler(event)"/>
				<s:Label x="10" y="10" text="Name:"/>
				<s:Label x="10" y="30" text="Email:"/>
				<s:Label x="10" y="50" text="Last login:"/>
				<s:Label x="10" y="70" text="Created at:"/>
				<s:Label id="nameLabel" x="82" y="10" width="206" text="name"/>
				<s:Label id="emailLabel" x="82" y="30" width="206" text="email"/>
				<s:Label id="loginLabel" x="82" y="50" width="206" text="login"/>
				<s:Label id="createLabel" x="82" y="70" width="206" text="create"/>
			</s:Panel>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Places" id="placesTab" enabled="false">
			<mx:HBox x="10" y="0" width="704" height="416" borderVisible="true" dropShadowVisible="true">
				<maps:Map id="map" mapevent_mappreinitialize="onMapPreinitialize(event)" mapevent_mapready="onMapReady(event)" width="100%" height="100%" sensor="true" key="ABQIAAAA4_yxEyBGCBN2nqvjUQVL9hT2yXp_ZAY8_ufC3CFXhHIE1NvwkxR3jxKzpl1NpDMUJDTf4Q1RVtDCkg"/>
			</mx:HBox>
			<s:Image id="addPlaceIcon" visible="false" x="651" y="5" width="63" height="50" toolTip="Add place..." smooth="true"
					 smoothingQuality="high" source="com/cocoafish/sdk/test/images/addplace.png" buttonMode="true" click="addMarker(event)"/>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Photo Collections" id="photoTab" enabled="false">
			<mx:VBox id="box" x="10" width="704" height="310" maxWidth="600" maxHeight="300"
					 horizontalAlign="center" verticalGap="0">
				<containers:CoverFlowContainer id="coverflow" width="100%" height="100%" 
										   horizontalGap="40" borderStyle="inset" backgroundColor="0x000000"
										   segments="6" reflectionEnabled="true" creationComplete="initCollectionCoverFlow()">
					
				</containers:CoverFlowContainer>
				<mx:HScrollBar id="scrollbar" width="100%" pageSize="1" maxScrollPosition="{coverflow.numChildren - 1}"
						   scrollPosition="{coverflow.selectedIndex}" 
						   scroll="coverflow.selectedIndex = Math.round(scrollbar.scrollPosition)" />
			</mx:VBox>
			<s:Panel x="14" y="316" width="311" height="99" title="Create Collection">
				<s:Label x="10" y="10" height="22" fontWeight="bold" text="Name:"
						 verticalAlign="middle"/>
				<s:TextInput id="collectionName" x="50" y="10" width="237"
							 prompt="&lt;Collection name&gt;"/>
				<s:Button x="217" y="40" label="Create" click="createCollection()"/>
			</s:Panel>
		</s:NavigatorContent>
		<s:NavigatorContent width="100%" height="100%" label="Key-values" id="keyvalueTab" enabled="false">
			<s:DataGrid id="keyvalueGrid" x="9" y="237" width="704" height="179"
						creationComplete="refreshDataGrid()" dataProvider="{keyvalueGridData}">
				<s:columns>
					<s:ArrayList>
						<s:GridColumn width="200" dataField="keyField" headerText="Key"></s:GridColumn>
						<s:GridColumn width="400" dataField="valueField" headerText="Value"></s:GridColumn>
						<s:GridColumn dataField="opr" headerText=" "
									  itemRenderer="com.cocoafish.sdk.test.components.keyvalues"
									  resizable="false" sortable="false"></s:GridColumn>
					</s:ArrayList>
				</s:columns>
			</s:DataGrid>
			<s:Panel x="10" y="10" width="705" height="206" title="Create Key-value">
				<s:Label x="10" y="10" height="22" fontWeight="bold" text="Key:"
						 verticalAlign="middle"/>
				<s:TextInput id="keyText" x="53" y="10" width="640"/>
				<s:Label x="10" y="40" fontWeight="bold" text="Value:"/>
				<s:TextArea id="valueText" x="53" y="40" width="641" height="94"/>
				<s:Button x="623" y="142" label="Add" click="addKeyValuePair()"/>
			</s:Panel>
		</s:NavigatorContent>
	</mx:TabNavigator>
	<s:Label x="10" y="10" fontSize="20" fontWeight="bold" text="Cocoafish Actionscript SDK Tests"/>
	<s:VGroup x="10" y="37" width="84" height="81">
		<s:RadioButton id="appKey" label="App. Key" click="appKey_clickHandler(event)"
					   groupName="radiogroup1" selected="false"/>
		<s:RadioButton id="oauth" label="OAuth" click="oauth_clickHandler(event)" enabled="true"
					   groupName="radiogroup1" selected="true"/>
	</s:VGroup>
	<s:TextInput id="appKeyTextField" x="99" y="37" width="514" prompt="&lt;app key&gt;"
				 text="fNEQf2q7T4pQIuJUU4aRvoaHFhuiVP77"/>
	<s:TextInput id="oauthKeyTextField" x="145" y="62" width="468" enabled="false"
				 prompt="&lt;oauth key&gt;" text="2dnrrXXeypfyLUJFbOw550BTpHEx8sED"/>
	<s:TextInput id="oauthSecretTextField" x="146" y="87" width="467" enabled="false"
				 prompt="&lt;oauth secret&gt;" text="SnUpTiNiqQHujIK98K5rfTuo6CpsMjFC"/>
	<s:Label x="99" y="93" text="Secret:"/>
	<s:Label x="99" y="67" text="Key:"/>
</s:Application>
